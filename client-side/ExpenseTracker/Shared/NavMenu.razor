@if (ShowSpinner)
{
    <div class="sb-content-overlay">
        <div class="sb-loading">
            <svg class="circular" height="40" width="40">
                <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
            </svg>
        </div>
    </div>
}

<nav class="navbar navbar-default" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <span id="menu-toggle" href="#" class="navbar-toggle e-icon" @onclick="ToggleMenuClick"></span>
            <div class="navbar-brand samplenameheader"></div>
        </div>
    </div>
</nav>

<div>
    <SfSidebar ID="sidebar-indexdefault" @ref="DefaultSidebar" Width="200px" MediaQuery="(min-width: 768px)" Created="OnCreate">
        <ChildContent>
            <div id="sidebar-wrapper" class="@SideBarToggleClass">
                <div class='samplename-header'>
                    <div class='samplename'><h1>EXPENSE TRACKER</h1></div>
                </div>
                <div class="info align-center">
                    <div class="image"></div>
                    <div class="content nameContent">
                        <p class='name' id='user-name'>Nicholas Delacruz</p>
                        <div class='wallet-container'>
                            <span style='height: 27px;' class='balance-align'>
                                <img alt="Cash wallet" src="./styles/images/cash-wallet.svg" />
                            </span>
                            <span id="current-balance" class='balance-align'>@ExpenseDataService.CurrentBalance</span>
                        </div>
                    </div>
                </div>
                <div class="page-list align-center nav-list">
                    <div class='nav-item'>
                        <NavLink class="overview" href="" @onmousedown="@(() => StartSpinner("dashboard"))" @ontouchstart="@(() => StartSpinner("dashboard"))" Match="NavLinkMatch.All" @onclick="@(() => OnNavClick("dashboard"))">
                            <span aria-hidden="true" title="Dashboard">Dashboard</span>
                        </NavLink>
                    </div>
                    <div class='nav-item'>
                        <NavLink class="expense" href="expense" @onmousedown="@(() => StartSpinner("expense"))" @ontouchstart="@(() => StartSpinner("expense"))" @onclick="@(() => OnNavClick("expense"))" Match="NavLinkMatch.All">
                            <span aria-hidden="true" title="Transactions">Transactions</span>
                        </NavLink>
                    </div>
                    <div class='nav-item'>
                        <NavLink class="about" href="about" @onmousedown="@(() => StartSpinner("about"))" @ontouchstart="@(() => StartSpinner("about"))" @onclick="@(() => OnNavClick("about"))" Match="NavLinkMatch.All">
                            <span aria-hidden="true" title="About">About</span>
                        </NavLink>
                    </div>
                </div>
                <div class="github-logo">
                    <a href="https://github.com/syncfusion/blazor-showcase-expense-tracker/client-side" target="_blank">
                        <img src="mark.svg" /><span>Source Code</span>
                    </a>
                </div>
            </div>
        </ChildContent>
    </SfSidebar>
</div>

<div id="overlay" class="@OverlayClass" @onclick="OverlayClick"></div>

@functions {
    SfSidebar DefaultSidebar;

    [CascadingParameter]
    private ExpenseDataService ExpenseDataService { get; set; }

    public string OverlayClass = "";
    public string SideBarToggleClass = "sidebar-toggle";

    public bool IsSidebarOpen = false;
    private bool ShowSpinner = false;
    private string Page;
    private string CurrentBalance = "0";

    [Parameter]
    public Action<string> OnSidebarCreate { get; set; }

    protected override void OnInitialized()
    {
        Page = "";
        ExpenseDataService.OnChange += StateHasChanged;
    }

    public void ToggleMenuClick()
    {
        this.ToggleMenu();
    }

    public void OverlayClick()
    {
        this.RemoveToggleClass();
        this.DefaultSidebar.Hide();
        this.IsSidebarOpen = false;
        this.HandleOverlay();
    }

    public void OnCreate()
    {
        OnSidebarCreate.Invoke("Created");
    }

    public void ToggleMenu()
    {
        if (this.IsSidebarOpen)
        {
            this.RemoveToggleClass();
            this.DefaultSidebar.Hide();
            this.IsSidebarOpen = false;
            SideBarToggleClass = "sidebar-toggle close";
            this.DisableOverlay();
        }
        else
        {
            this.RemoveToggleClass();
            this.DefaultSidebar.Show();
            this.IsSidebarOpen = true;
            SideBarToggleClass = "sidebar-toggle open";
            this.EnableOverlay();
        }
    }

    public void RemoveToggleClass()
    {
        SideBarToggleClass = "sidebar-toggle";
    }

    public void EnableOverlay()
    {
        this.OverlayClass = "dialog enable-overlay";
    }

    public void DisableOverlay()
    {
        this.OverlayClass = "disable-overlay";
    }

    private void OnNavClick(string Page)
    {
        ShowSpinner = false;
        StateHasChanged();
        this.HandleOverlay();
    }

    public void HandleOverlay()
    {
        this.DisableOverlay();
        this.RemoveToggleClass();
    }

    private void StartSpinner(string page)
    {
        if (!ShowSpinner && page != Page)
        {
            ShowSpinner = true;
            StateHasChanged();
        }
        Page = page;
    }
}
