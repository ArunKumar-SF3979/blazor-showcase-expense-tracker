<div class="row">
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="tolincome">@TotalIncome</h3>
                <span class="card-text">Income</span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="tolexpense">@TotalExpense</h3>
                <span class="card-text">Expenses</span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="tolbalance">@TotalBalance</h3>
                <span class="card-text">Balance</span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="toltransaction">@TotalTransactions</h3>
                <span class="card-text">Transactions</span>
            </div>
        </div>
    </div>
</div>

@code{
    [CascadingParameter]
    private ExpenseDataService ExpenseDataService { get; set; }

    [Parameter]
    public List<ExpenseData> IncomeData { get; set; }
    [Parameter]
    public List<ExpenseData> ExpenseData { get; set; }

    public string TotalIncome = "$0";
    public string TotalExpense = "$0";
    public string TotalBalance = "$0";
    public string TotalTransactions = "0";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UpdateCards();
    }

    /// <summary>
    /// Calculation for card values
    /// </summary>
    public void UpdateCards()
    {
        int incomeRS = 0;
        int expenseRS = 0;
        List<ExpenseData> incomeD = new List<ExpenseData>();
        List<ExpenseData> expenseD = new List<ExpenseData>();
        var commonData = ExpenseDataService.CurrentExpenseData;
        //Calulates total income and sets to the Income card
        incomeD = commonData.Where(s => s.TransactionType == "Income").ToList();
        incomeRS = incomeD.Sum(s => s.Amount);
        TotalIncome = CommonService.GetCurrencyVal(incomeRS);

        //Calulates total expenses and sets to the Expenses card
        expenseD = commonData.Where(s => s.TransactionType == "Expense").ToList();
        expenseRS = expenseD.Sum(s => s.Amount);
        TotalExpense = CommonService.GetCurrencyVal(expenseRS);
        TotalBalance = CommonService.GetCurrencyVal(incomeRS - expenseRS);

        var transaction = commonData.ToList();
        TotalTransactions = CommonService.GetNumberVal(transaction.Count());

        ExpenseDataService.UpdateCurrentBalance(TotalBalance);
    }
}