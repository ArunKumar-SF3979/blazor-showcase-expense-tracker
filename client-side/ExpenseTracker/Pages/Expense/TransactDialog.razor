@implements IDisposable;

<div id='dlg-content'>
    <div id="confirmDialogTarget">
        @if (CreateConfirmDialog)
        {
            <SfDialog @ref="ConfirmDialog" Width="40%" CssClass="confirm-dialog" ShowCloseIcon="true" CloseOnEscape="false" IsModal="true" Target="#sidebarRightpane">
                <DialogTemplates>
                    <Header>Delete</Header>
                    <Content>Are you sure you want to delete the selected transaction(s)?</Content>
                </DialogTemplates>
                <DialogButtons>
                    <DialogButton ButtonModel="@deleteBtnOk" OnClick="OnClickDelete" />
                    <DialogButton ButtonModel="@deleteBtnNo" OnClick="OnClickCancel" />
                </DialogButtons>
            </SfDialog>
        }
    </div>
    <div id="dialogTarget">
        @if (CreateNewDialog)
        {
            <SfDialog @ref="TransactionDialog" Width="100%" CssClass="transact-dialog" ShowCloseIcon="true" CloseOnEscape="false" IsModal="true" Target="#sidebarRightpane">
                <ChildContent>
                    <DialogTemplates>
                        <Header>@DialogHeader</Header>
                    </DialogTemplates>
                    <div class='dlg-content'>
                        <div class="transaction-dialog">
                            <input type='hidden' id="uniqueId" @bind="UniqueId" class="e-input required readonly" />
                            <div class='dlg-radio-btn-section'>
                                <div class='dlg-income-radio-section'>
                                    <SfRadioButton Label="Income" @bind-Checked='IncomeChecked' Value="Income" Name='dlgTransactionType' ValueChange="DlgTransactTypeChanged"></SfRadioButton>
                                </div>
                                <div class='dlg-expense-radio-section'>
                                    <SfRadioButton Label="Expense" @bind-Checked='ExpenseChecked' Value="Expense" Name='dlgTransactionType' ValueChange="DlgTransactTypeChanged"></SfRadioButton>
                                </div>
                            </div>
                            <div class='dlg-date-section'>
                                <div class='dlg-date-picker-container'>
                                    <div>
                                        <SfDatePicker Placeholder='Choose a Date' Width='100%' FloatLabelType='FloatLabelType.Always' @bind-Value="DateValue" Min="@MinDate" Max="@MaxDate"></SfDatePicker>
                                    </div>
                                </div>
                                <div class='dlg-time-picker-container'>
                                    <div>
                                        <SfTimePicker Placeholder='Choose a Time' Width='100%' FloatLabelType='FloatLabelType.Always' @bind-Value="TimeValue"></SfTimePicker>
                                    </div>
                                </div>
                            </div>
                            <div class='category-section'>
                                <div class='dlg-category-container'>
                                    <div>
                                        <SfDropDownList @ref="DropDownList" TValue="string" CssClass='Category' Placeholder='Select a Category' FloatLabelType='FloatLabelType.Always'
                                                        TItem="CategoryData" DataSource='CategoryDataSource' @bind-Value="CategoryValue">
                                            <DropDownListFieldSettings Text="Category" Value="Category" IconCss="Class"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                </div>
                                <div class='dlg-amount-container'>
                                    <div>
                                        <SfNumericTextBox TValue="int?" Placeholder='Enter a Amount' FloatLabelType='FloatLabelType.Always' Format="c2" Min="0" @bind-Value="Amount"></SfNumericTextBox>
                                    </div>
                                </div>
                            </div>
                            <div class='description-container'>
                                <div>
                                    <div class="e-float-input">
                                        <input type='text' @bind="Description" class="e-input required readonly" />
                                        <span class="e-float-line"></span>
                                        <label class="e-float-text e-label-top">Descriptions</label>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <div class='payment-label'>
                                    <label class="">PaymentMode</label>
                                </div>
                                <div class='payment-radio-container'>
                                    <div class='dlg-cash-payment'>
                                        <SfRadioButton Label="Cash" Value="Cash" @bind-Checked='CashChecked' Name='dlgPaymentMode'></SfRadioButton>
                                    </div>
                                    <div class='dlg-debit-payment'>
                                        <SfRadioButton Label="Debit Card" Value="Debit Card" @bind-Checked='DebitChecked' Name='dlgPaymentMode'></SfRadioButton>
                                    </div>
                                    <div class='dlg-credit-payment'>
                                        <SfRadioButton Label="Credit Card" Value="Credit Card" @bind-Checked='CreditChecked' Name='dlgPaymentMode'></SfRadioButton>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <DialogButtons>
                        <DialogButton ButtonModel="@buttonPrimary" OnClick="OnClickSave" />
                        <DialogButton ButtonModel="@buttonCancel" OnClick="OnClickCancel" />
                    </DialogButtons>
                    <DialogEvents Created="OnCreate"></DialogEvents>
                </ChildContent>
            </SfDialog>
        }
    </div>
</div>

@code{
    public SfDialog TransactionDialog;
    public SfDialog ConfirmDialog;
    public TransactGrid ContentRef;
    SfDropDownList<string, CategoryData> DropDownList;

    public string CategoryValue { get; set; } = null;
    public DateTime? DateValue;
    public DateTime? TimeValue;
    public string UniqueId { get; set; }
    public string Description { get; set; }
    public int? Amount { get; set; } = 0;
    public List<CategoryData> CategoryDataSource { get; set; }
    [CascadingParameter]
    public ExpenseDataService ExpenseDataService { get; set; }
    [Parameter]
    public Action<List<ExpenseData>> OnGridUpdate { get; set; }
    public bool IsAdd = false;

    private string visibility = "none";
    private DateTime MinDate;
    private DateTime MaxDate;
    private ExpenseData SelectedRecord;

    public string DialogHeader { get; set; }
    public bool CreateNewDialog = false;
    public bool CreateConfirmDialog = false;
    public bool IncomeChecked = false;
    public bool ExpenseChecked = true;

    public bool CashChecked = true;
    public bool CreditChecked = false;
    public bool DebitChecked = false;

    public ButtonModel deleteBtnOk = new ButtonModel { Content = "Yes", CssClass = "e-ok e-flat", IsPrimary = true };
    public ButtonModel deleteBtnNo = new ButtonModel { Content = "No", CssClass = "e-no e-flat" };
    public ButtonModel buttonPrimary = new ButtonModel { Content = "Add", CssClass = "e-info e-add", IsPrimary = true };
    public ButtonModel buttonCancel = new ButtonModel { Content = "Cancel", CssClass = "e-outline e-cancel" };

    List<ExpenseData> GridSelectedRecords { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.DialogHeader = "";
        this.Description = "";
        this.DateValue = ExpenseDataService.EndDate;
        this.MinDate = new DateTime(2019, 06, 01, 00, 00, 00);
        this.MaxDate = new DateTime(2019, 11, 30, 23, 59, 59);
        this.CategoryDataSource = new List<CategoryData>();
        this.GridSelectedRecords = new List<ExpenseData>();
        this.CategoryDataSource = ExpenseDataService.CategoryExpenseData;
    }

    /// <summary>
    /// Show Add Dialog
    /// </summary>
    public void ShowAddDialog()
    {
        this.IsAdd = true;
        if (this.TransactionDialog == null)
        {
            this.UpdateAddDialog();
            CreateNewDialog = true;
            StateHasChanged();
        }
        else
        {
            this.UpdateAddDialog();
            this.TransactionDialog.Show();
        }
    }

    private void UpdateAddDialog()
    {
        this.DialogHeader = "New Transaction";
        this.buttonPrimary.Content = "Add";
        this.UniqueId = "T" + DateTime.Now.Ticks.ToString().Substring(12, 6);
        this.Amount = 0;
        this.DateValue = this.TimeValue = ExpenseDataService.EndDate;
        this.Description = "";
        this.IncomeChecked = false;
        this.ExpenseChecked = true;
        this.CashChecked = true;
        this.CreditChecked = false;
        this.DebitChecked = false;
        this.CategoryDataSource = ExpenseDataService.CategoryExpenseData;
        this.CategoryValue = ExpenseDataService.CategoryExpenseData[0].Category;
        if (this.DropDownList != null)
        {
            this.DropDownList.Value = this.CategoryValue;
            this.DropDownList.DataBind();
        }
    }

    /// <summary>
    /// Show edit dialog
    /// </summary>
    /// <param name="selectedRecord"></param>
    public void ShowEditDialog(ExpenseData selectedRecord)
    {
        this.IsAdd = false;
        SelectedRecord = selectedRecord;
        if (this.TransactionDialog == null)
        {
            this.UpdateEditDialog();
            CreateNewDialog = true;
            StateHasChanged();
        }
        else
        {
            this.UpdateEditDialog();
            this.TransactionDialog.Show();
        }
    }

    private void UpdateEditDialog()
    {
        this.DialogHeader = "Edit Transaction";
        this.buttonPrimary.Content = "Save";
        if (SelectedRecord != null)
        {
            this.UniqueId = SelectedRecord.UniqueId;
            if (SelectedRecord.TransactionType == "Income")
            {
                this.IncomeChecked = true;
                this.ExpenseChecked = false;
                this.CategoryDataSource = this.ExpenseDataService.CategoryIncomeData;

            }
            else if (SelectedRecord.TransactionType == "Expense")
            {
                this.IncomeChecked = false;
                this.ExpenseChecked = true;
                this.CategoryDataSource = this.ExpenseDataService.CategoryExpenseData;
            }
            this.DateValue = this.TimeValue = SelectedRecord.DateTime;
            if (SelectedRecord.PaymentMode == "Credit Card")
            {
                this.CashChecked = false;
                this.CreditChecked = true;
                this.DebitChecked = false;
            }
            else if (SelectedRecord.PaymentMode == "Debit Card")
            {
                this.CashChecked = false;
                this.CreditChecked = false;
                this.DebitChecked = true;
            }
            else if (SelectedRecord.PaymentMode == "Cash")
            {
                this.CashChecked = true;
                this.CreditChecked = false;
                this.DebitChecked = false;
            }
            this.Description = SelectedRecord.Description;
            this.Amount = SelectedRecord.Amount;
            this.CategoryValue = SelectedRecord.Category;
            if (this.DropDownList != null)
            {
                this.DropDownList.Value = this.CategoryValue;
                this.DropDownList.DataBind();
            }
        }
    }

    public void OnCreate()
    {
        if (IsAdd)
            this.UpdateAddDialog();
        else
            this.UpdateEditDialog();
        this.visibility = "";
    }

    /// <summary>
    /// Show alert dialog
    /// </summary>
    /// <param name="selectedRecords"></param>
    public void ShowAlertDialog(List<ExpenseData> selectedRecords)
    {
        this.GridSelectedRecords = selectedRecords;
        if (this.ConfirmDialog == null)
        {
            CreateConfirmDialog = true;
            StateHasChanged();
        }
        else
        {
            this.ConfirmDialog.Show();
        }
    }

    public void DlgOverlayClicked(object args)
    {
        if (CreateNewDialog)
            this.TransactionDialog.Hide();
        if (CreateConfirmDialog)
            this.ConfirmDialog.Hide();
    }

    public void DlgTransactTypeChanged(object args)
    {
        if (this.IncomeChecked)
        {
            this.CategoryDataSource = this.ExpenseDataService.CategoryIncomeData;
        }
        else
        {
            this.CategoryDataSource = this.ExpenseDataService.CategoryExpenseData;
        }
        this.CategoryValue = this.CategoryDataSource[0].Category;
        this.DropDownList.Value = this.CategoryValue;
        this.DropDownList.DataBind();
    }

    /// <summary>
    /// Add or edit grid data
    /// </summary>
    /// <param name="args"></param>
    public void OnClickSave(object args)
    {
        var expenseData = new ExpenseData();
        expenseData.UniqueId = this.UniqueId;
        expenseData.TransactionType = this.IncomeChecked == true ? "Income" : "Expense";
        expenseData.DateTime = (this.DateValue == null ? ExpenseDataService.EndDate : (DateTime)this.DateValue).Date.Add((this.TimeValue == null ? ExpenseDataService.EndDate : (DateTime)this.TimeValue).TimeOfDay);
        expenseData.Category = this.CategoryValue;
        expenseData.PaymentMode = this.CashChecked == true ? "Cash" : this.CreditChecked == true ? "Credit Card" : "Debit Card";
        expenseData.Description = this.Description;
        expenseData.Amount = (int)this.Amount;
        expenseData.MonthShort = expenseData.DateTime.ToString("MMM");
        expenseData.MonthFull = expenseData.DateTime.ToString("MMMM, yyyy");
        expenseData.FormattedDate = expenseData.DateTime.ToString("MM/dd/yyyy hh:mm tt");
        if (IsAdd)
        {
            this.ContentRef.AddRecord(expenseData);
        }
        else
        {
            this.ContentRef.UpdateRecord(expenseData);
        }
        this.TransactionDialog.Hide();
        this.ContentRef.UpdateTotalBalance();
    }

    /// <summary>
    /// Delete record from grid
    /// </summary>
    /// <param name="args"></param>
    public void OnClickDelete(object args)
    {
        var selectedIds = this.GridSelectedRecords.Select(s => s.UniqueId).ToList();
        this.ContentRef.RemoveRecord(selectedIds);
        this.ConfirmDialog.Hide();
        this.ContentRef.UpdateTotalBalance();
    }

    public void OnClickCancel(object args)
    {
        this.DlgOverlayClicked(args);
    }

    public void Dispose()
    {
        ConfirmDialog = null;
        TransactionDialog = null;
        DropDownList = null;
        GC.SuppressFinalize(this);
    }
}
