
<div id='dlg-content' style="display: @visibility">
    <div id="confirmDialogTarget">
        <EjsDialog @ref="ConfirmDialog" Width="40%" CssClass="confirm-dialog" ShowCloseIcon="true" @bind-Visible="ConfirmBindVisible" CloseOnEscape="false" IsModal="true" Content="Are you sure you want to delete the selected transaction(s)?" Target="#body">
            <DialogButtons>
                <DialogButton ButtonModel="@deleteBtnOk" OnClick="OnClickDelete"></DialogButton>
                <DialogButton ButtonModel="@deleteBtnNo" OnClick="OnClickCancel" />
            </DialogButtons>
        </EjsDialog>
    </div>
    <div id="dialogTarget">
        <EjsDialog @ref="TransactionDialog" Width="100%" CssClass="transact-dialog" ShowCloseIcon="true" @bind-Visible="bindVisible" CloseOnEscape="false" IsModal="true" Target="#body">
            <ChildContent>
                <DialogTemplates>
                    <Header>@DialogHeader</Header>
                </DialogTemplates>
                <div class='dlg-content'>
                    <div class="transaction-dialog">
                        <input type='hidden' id="uniqueId" @bind="UniqueId" class="e-input required readonly" />
                        <div class='dlg-radio-btn-section'>
                            <div class='dlg-income-radio-section'>
                                <EjsRadioButton Label="Income" @bind-Checked='IncomeChecked' Value="Income" Name='dlgTransactionType' ValueChange="DlgTransactTypeChanged"></EjsRadioButton>
                            </div>
                            <div class='dlg-expense-radio-section'>
                                <EjsRadioButton Label="Expense" @bind-Checked='ExpenseChecked' Value="Expense" Name='dlgTransactionType' ValueChange="DlgTransactTypeChanged"></EjsRadioButton>
                            </div>
                        </div>
                        <div class='dlg-date-section'>
                            <div class='dlg-date-picker-container'>
                                <div>
                                    <EjsDatePicker Placeholder='Choose a Date' Width='100%' FloatLabelType='FloatLabelType.Always' @bind-Value='DateValue'></EjsDatePicker>
                                </div>
                            </div>
                            <div class='dlg-time-picker-container'>
                                <div>
                                    <EjsTimePicker Placeholder='Choose a Time' Width='100%' FloatLabelType='FloatLabelType.Always' @bind-Value='DateValue'></EjsTimePicker>
                                </div>
                            </div>
                        </div>
                        <div class='category-section'>
                            <div class='dlg-category-container'>
                                <div>
                                    <EjsDropDownList TValue="string" CssClass='Category' Placeholder='Select a Category' FloatLabelType='FloatLabelType.Always'
                                                     TItem="CategoryData" DataSource='CategoryDataSource' @bind-Value="CategoryValue">
                                        <DropDownListFieldSettings Text="Category" Value="Category" IconCss="Class"></DropDownListFieldSettings>
                                    </EjsDropDownList>
                                </div>
                            </div>
                            <div class='dlg-amount-container'>
                                <div>
                                    <EjsNumericTextBox TValue="int?" Placeholder='Enter a Amount' FloatLabelType='FloatLabelType.Always' Format="c2" @bind-Value="Amount"></EjsNumericTextBox>
                                </div>
                            </div>
                        </div>
                        <div class='description-container'>
                            <div>
                                <div class="e-float-input">
                                    <input type='text' @bind="Description" class="e-input required readonly" />
                                    <span class="e-float-line"></span>
                                    <label class="e-float-text e-label-top">Descriptions</label>
                                </div>
                            </div>
                        </div>
                        <div>
                            <div class='payment-label'>
                                <label class="">PaymentMode</label>
                            </div>
                            <div class='payment-radio-container'>
                                <div class='dlg-cash-payment'>
                                    <EjsRadioButton Label="Cash" Value="Cash" @bind-Checked='CashChecked' Name='dlgPaymentMode'></EjsRadioButton>
                                </div>
                                <div class='dlg-debit-payment'>
                                    <EjsRadioButton Label="Debit Card" Value="Debit Card" @bind-Checked='DebitChecked' Name='dlgPaymentMode'></EjsRadioButton>
                                </div>
                                <div class='dlg-credit-payment'>
                                    <EjsRadioButton Label="Credit Card" Value="Credit Card" @bind-Checked='CreditChecked' Name='dlgPaymentMode'></EjsRadioButton>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <DialogButtons>
                    <DialogButton ButtonModel="@buttonPrimary" OnClick="OnClickSave" />
                    <DialogButton ButtonModel="@buttonCancel" OnClick="OnClickCancel" />
                </DialogButtons>
                <DialogEvents Created="OnCreate"></DialogEvents>
            </ChildContent>
        </EjsDialog>
    </div>
</div>

@code{
    public EjsDialog TransactionDialog;
    public EjsDialog ConfirmDialog;
    public TransactGrid ContentRef;

    public string CategoryValue { get; set; } = null;
    public DateTime? DateValue { get; set; }
    public string UniqueId { get; set; }
    public string Description { get; set; }
    public int? Amount { get; set; } = 0;
    public List<CategoryData>
        CategoryDataSource { get; set; }
    [CascadingParameter]
    public ExpenseDataService ExpenseDataService { get; set; }
    [Parameter]
    public Action<List<ExpenseData>> OnGridUpdate { get; set; }
    public bool IsAdd = false;

    private string visibility = "none";

    public string DialogHeader { get; set; }
    public bool bindVisible { get; set; } = false;
    public bool ConfirmBindVisible { get; set; } = false;
    public bool IncomeChecked = false;
    public bool ExpenseChecked = true;

    public bool CashChecked = true;
    public bool CreditChecked = false;
    public bool DebitChecked = false;

    public ButtonModel deleteBtnOk = new ButtonModel { content = "Yes", cssClass = "e-ok e-flat", isPrimary = true };
    public ButtonModel deleteBtnNo = new ButtonModel { content = "No", cssClass = "e-no e-flat" };
    public ButtonModel buttonPrimary = new ButtonModel { content = "Add", cssClass = "e-info e-add", isPrimary = true };
    public ButtonModel buttonCancel = new ButtonModel { content = "Cancel", cssClass = "e-outline e-cancel" };

    List<ExpenseData> GridSelectedRecords { get; set; }

    protected override void OnInitialized()
    {
        this.DialogHeader = "";
        this.Description = "";
        this.DateValue = ExpenseDataService.EndDate;
        this.CategoryDataSource = new List<CategoryData>();
        this.GridSelectedRecords = new List<ExpenseData>();
        this.CategoryDataSource = ExpenseDataService.CategoryExpenseData;
    }

    /// <summary>
    /// Show Add Dialog
    /// </summary>
    public void ShowAddDialog()
    {
        this.IsAdd = true;
        this.DialogHeader = "New Transaction";
        this.buttonPrimary.content = "Add";
        this.UniqueId = "T" + DateTime.Now.Ticks.ToString().Substring(12, 6);
        this.Amount = 0;
        this.DateValue = ExpenseDataService.EndDate;
        this.Description = "";
        this.IncomeChecked = false;
        this.ExpenseChecked = true;
        this.CashChecked = true;
        this.CreditChecked = false;
        this.DebitChecked = false;
        this.CategoryValue = null;
        this.CategoryDataSource = ExpenseDataService.CategoryExpenseData;
        this.CategoryDataSource = ExpenseDataService.CategoryExpenseData;
        this.TransactionDialog.Show();
    }

    /// <summary>
    /// Show edit dialog
    /// </summary>
    /// <param name="selectedRecord"></param>
    public void ShowEditDialog(ExpenseData selectedRecord)
    {
        this.IsAdd = false;
        this.DialogHeader = "Edit Transaction";
        this.buttonPrimary.content = "Save";
        if (selectedRecord != null)
        {
            this.UniqueId = selectedRecord.UniqueId;
            if (selectedRecord.TransactionType == "Income")
            {
                this.IncomeChecked = true;
                this.ExpenseChecked = false;
                this.CategoryDataSource = this.ExpenseDataService.CategoryIncomeData;

            }
            else if (selectedRecord.TransactionType == "Expense")
            {
                this.IncomeChecked = false;
                this.ExpenseChecked = true;
                this.CategoryDataSource = this.ExpenseDataService.CategoryExpenseData;
            }
            this.DateValue = selectedRecord.DateTime;
            if (selectedRecord.PaymentMode == "Credit Card")
            {
                this.CashChecked = false;
                this.CreditChecked = true;
                this.DebitChecked = false;
            }
            else if (selectedRecord.PaymentMode == "Debit Card")
            {
                this.CashChecked = false;
                this.CreditChecked = false;
                this.DebitChecked = true;
            }
            else if (selectedRecord.PaymentMode == "Cash")
            {
                this.CashChecked = true;
                this.CreditChecked = false;
                this.DebitChecked = false;
            }
            this.Description = selectedRecord.Description;
            this.CategoryValue = selectedRecord.Category;
            this.Amount = selectedRecord.Amount;
            this.TransactionDialog.Show();
        }
    }

    public void OnCreate()
    {
        this.visibility = "";
    }

    /// <summary>
    /// Show alert dialog
    /// </summary>
    /// <param name="selectedRecords"></param>
    public void ShowAlertDialog(List<ExpenseData> selectedRecords)
    {
        this.GridSelectedRecords = selectedRecords;
        this.ConfirmDialog.Show();
    }

    public void DlgOverlayClicked(object args)
    {
        this.TransactionDialog.Hide();
        this.ConfirmDialog.Hide();
    }

    public void DlgTransactTypeChanged(object args)
    {
        this.CategoryValue = "";
        if (this.IncomeChecked)
        {
            this.CategoryDataSource = this.ExpenseDataService.CategoryIncomeData;
        }
        else
        {
            this.CategoryDataSource = this.ExpenseDataService.CategoryExpenseData;
        }
    }

    /// <summary>
    /// Add or edit grid data
    /// </summary>
    /// <param name="args"></param>
    public void OnClickSave(object args)
    {
        var expenseData = new ExpenseData();
        expenseData.UniqueId = this.UniqueId;
        expenseData.TransactionType = this.IncomeChecked == true ? "Income" : "Expense";
        expenseData.DateTime = (DateTime) this.DateValue;
        expenseData.Category = this.CategoryValue;
        expenseData.PaymentMode = this.CashChecked == true ? "Cash" : this.CreditChecked == true ? "Credit Card" : "Debit Card";
        expenseData.Description = this.Description;
        expenseData.Amount = (int) this.Amount;
        expenseData.MonthShort = expenseData.DateTime.ToString("MMM");
        expenseData.MonthFull = expenseData.DateTime.ToString("MMMM, yyyy");
        expenseData.FormattedDate = expenseData.DateTime.ToString("MM/dd/yyyy hh:mm tt");
        if (IsAdd)
        {
            this.ContentRef.AddRecord(expenseData);
        }
        else
        {
            this.ContentRef.UpdateRecord(expenseData);
        }
        this.TransactionDialog.Hide();
        this.ContentRef.UpdateTotalBalance();
    }

    /// <summary>
    /// Delete record from grid
    /// </summary>
    /// <param name="args"></param>
    public void OnClickDelete(object args)
    {
        var selectedIds = this.GridSelectedRecords.Select(s => s.UniqueId).ToList();
        this.ContentRef.RemoveRecord(selectedIds);
        this.ConfirmDialog.Hide();
        this.ContentRef.UpdateTotalBalance();
    }

    public void OnClickCancel(object args)
    {
        this.TransactionDialog.Hide();
        this.ConfirmDialog.Hide();
    }

    public class ButtonModel
    {
        public string content { get; set; }
        public string cssClass { get; set; }
        public bool isPrimary { get; set; }
    }
}
