@using Newtonsoft.Json;

<div>
    <div class='filter-container'>
        <EjsSidebar @ref="FilterSidebar" Width="270px" MediaQuery="(min-width: 768px)" Position="SidebarPosition.Right" Created="OnCreate">
            <ChildContent>
                <div class="@FilterSideBarClass">
                    <div style="display: @visibility; height: 100%;">
                        <div class="filter-head">
                            <span class="e-icon filter-icon filter-head-item"></span>
                            <span class="filter-txt filter-head-item">Filters</span>
                        </div>
                        <div class="expense-filter-container">
                            <label class="label-font">Select a range</label>
                            <div class='filter-item'>
                                <EjsDateRangePicker CssClass="DateTime" ShowClearButton="false" Format="MM/dd/yyyy" AllowEdit="false" EndDate="@ExpenseDataService.EndDate" StartDate="@ExpenseDataService.StartDate">
                                    <DateRangePickerEvents ValueChange="DateRangeChanged"></DateRangePickerEvents>
                                </EjsDateRangePicker>
                            </div>
                            <label class="label-font">Category</label>
                            <div class="treeview filter-item">
                                <EjsMultiSelect TValue="string[]" DataSource="@FilterCategoryList" Mode="@VisualMode.Box"
                                                Placeholder="Select Categories" HideSelectedItem="true" ClosePopupOnSelect="false">
                                    <MultiSelectEvents TValue="string[]" OnValueSelect="CategorySelect" OnValueRemove="CategoryRemove"></MultiSelectEvents>
                                    <MultiSelectFieldSettings Text="Text" Value="Value"></MultiSelectFieldSettings>
                                </EjsMultiSelect>
                            </div>
                            <label class="label-font bottom-align">Cashflow</label>
                            <div class="cashflow filter-item">
                                <EjsCheckBox Label="Income" @bind-Checked="IncomeChecked" CssClass="TransactionType" ValueChange="OnCheckBoxChange"></EjsCheckBox>
                                <EjsCheckBox Label="Expense" @bind-Checked="ExpenseChecked" CssClass="TransactionType" ValueChange="OnCheckBoxChange"></EjsCheckBox>
                            </div>
                            <label class="label-font bottom-align">Payment Mode</label>
                            <div class="paymentModes filter-item">
                                <EjsCheckBox Label="Cash" @bind-Checked="CashChecked" CssClass="PaymentMode"></EjsCheckBox>
                                <EjsCheckBox Label="Debit Card" @bind-Checked="DebitChecked" CssClass="PaymentMode"></EjsCheckBox>
                                <br />
                                <br />
                                <EjsCheckBox Label="Credit Card" @bind-Checked="CreditChecked" CssClass="PaymentMode"></EjsCheckBox>
                            </div>
                            <div>
                                <label class="label-font">Amount</label>
                                <div class='amount-filter'>
                                    <div class='min-numeric amt-filter'>
                                        <label class="inlineAlign minLabel">Min :</label>
                                        <EjsNumericTextBox TValue="int?" CssClass="inlineAlign" Width="55px" Format="c0" ShowSpinButton="false" Value="@MinAmount">
                                            <NumericTextBoxEvents TValue="int?" ValueChange="MinAmountChanged"></NumericTextBoxEvents>
                                        </EjsNumericTextBox>
                                    </div>
                                    <span class='amt-filter separateLine'></span>
                                    <div class='max-numeric amt-filter'>
                                        <label class="inlineAlign maxLabel">Max :</label>
                                        <EjsNumericTextBox TValue="int?" CssClass="inlineAlign" Width="55px" Format="c0" ShowSpinButton="false" Value="@MaxAmount">
                                            <NumericTextBoxEvents TValue="int?" ValueChange="MaxAmountChanged"></NumericTextBoxEvents>
                                        </EjsNumericTextBox>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </ChildContent>
        </EjsSidebar>
    </div>
</div>

@code {
    public EjsCheckBox CreditFilter;
    public EjsSlider<int[]> RangeFilter;
    public TransactGrid ContentRef;
    public EjsSidebar FilterSidebar;

    public string OverlayClass = "";
    public string FilterSideBarClass = "filter pane sidebar-wrapper-filter";
    public bool IncomeChecked = true;
    public bool ExpenseChecked = true;
    public bool CashChecked = true;
    public bool DebitChecked = true;
    public bool CreditChecked = true;
    public int? MinAmount { get; set; }
    public int? MaxAmount { get; set; }
    public int[] RangeValue = { 1, 100 };
    public List<string> CategoryValue { get; set; }
    public List<FilterCategory> FilterCategoryList { get; set; }
    public List<ExpenseData> TempData { get; set; }
    private string visibility = "none";

    [CascadingParameter]
    public ExpenseDataService ExpenseDataService { get; set; }

    protected override void OnInitialized()
    {
        this.MinAmount = 0;
        this.MaxAmount = 100;
        this.FilterCategoryList = new List<FilterCategory>();
        this.TempData = new List<ExpenseData>();
        this.CategoryValue = new List<string>();
        this.GetCategory();
        this.MinMaxAmount();
        this.RangeValue = new int[] { this.MinAmount.Value, this.MaxAmount.Value };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        this.UpdateGrid();
    }

    private void OnCreate()
    {
        this.visibility = "";
    }

    public void ShowFilterMenu()
    {
        this.FilterSidebar.Show();
        FilterSideBarClass = "filter pane sidebar-wrapper-filter filter-open";
    }

    public void HideFilterMenu()
    {
        this.FilterSidebar.Hide();
        FilterSideBarClass = "filter pane sidebar-wrapper-filter filter-close";
    }

    public void RemoveFitlerClass()
    {
        FilterSideBarClass = "filter pane sidebar-wrapper-filter";
    }

    public void OnCheckBoxChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        this.UpdateGrid();
    }

    public void CategorySelect(Syncfusion.EJ2.Blazor.DropDowns.SelectEventArgs args)
    {
        FilterCategory item = JsonConvert.DeserializeObject<FilterCategory>(args.ItemData.ToString());
        this.CategoryValue.Add(item.Value);
        this.UpdateGrid();
    }

    public void CategoryRemove(Syncfusion.EJ2.Blazor.DropDowns.RemoveEventArgs args)
    {
        FilterCategory item = JsonConvert.DeserializeObject<FilterCategory>(args.ItemData.ToString());
        this.CategoryValue.Remove(item.Value);
        this.UpdateGrid();
    }

    public void DateRangeChanged(RangeEventArgs args)
    {
        ExpenseDataService.SetDate(args.StartDate, args.EndDate);
        this.UpdateGrid();
        this.ContentRef.UpdateTotalBalance();
    }

    public void MinAmountChanged(Syncfusion.EJ2.Blazor.Inputs.ChangeEventArgs args)
    {
        this.MinAmount = (int)args.Value;
        this.UpdateGrid();
    }

    public void MaxAmountChanged(Syncfusion.EJ2.Blazor.Inputs.ChangeEventArgs args)
    {
        this.MaxAmount = (int)args.Value;
        this.UpdateGrid();
    }

    /** Gets the available category in-between the start and end date, for category filter dropdown */
    public void GetCategory()
    {
        this.FilterCategoryList = new List<FilterCategory>();
        DateTime start = ExpenseDataService.StartDate; DateTime end = ExpenseDataService.EndDate;
        foreach (var expenseData in ExpenseDataService.ExpenseData)
        {
            if (expenseData.DateTime >= start && expenseData.DateTime <= end)
            {
                this.FilterCategoryList.Add(new FilterCategory { Text = expenseData.Category, Value = expenseData.Category });
            }
        }
        this.FilterCategoryList = this.FilterCategoryList.GroupBy(x => x.Value).Select(y => y.First()).ToList();
    }

    /** Gets the minimum and maximum amount from the datasource */
    public void MinMaxAmount()
    {
        DateTime start = ExpenseDataService.StartDate; DateTime end = ExpenseDataService.EndDate;
        var expenseData = ExpenseDataService.ExpenseData.Where(s => s.DateTime >= start && s.DateTime <= end);
        this.MinAmount = expenseData.Min(s => s.Amount);
        this.MaxAmount = expenseData.Max(s => s.Amount);
    }

    /** Updates the Grid based on the filtered data source */
    public void UpdateGrid()
    {
        DateTime start = ExpenseDataService.StartDate; DateTime end = ExpenseDataService.EndDate;
        var expenseData = ExpenseDataService.ExpenseData.Where(s => s.DateTime >= start && s.DateTime <= end);
        expenseData = expenseData.Where(s => s.Amount >= this.MinAmount.Value && s.Amount <= this.MaxAmount.Value);
        if (this.IncomeChecked || this.ExpenseChecked)
        {
            if (this.IncomeChecked && this.ExpenseChecked)
                expenseData = expenseData.Where(s => s.TransactionType == "Income" || s.TransactionType == "Expense");
            else if (this.IncomeChecked)
                expenseData = expenseData.Where(s => s.TransactionType == "Income");
            else if (this.ExpenseChecked)
                expenseData = expenseData.Where(s => s.TransactionType == "Expense");
        }
        if (this.CashChecked || this.CreditChecked || this.DebitChecked)
        {
            if (this.CashChecked && this.CreditChecked && this.DebitChecked)
                expenseData = expenseData.Where(s => s.PaymentMode == "Cash" || s.PaymentMode == "Credit Card" || s.PaymentMode == "Debit Card");
            else if (this.CashChecked && this.CreditChecked)
                expenseData = expenseData.Where(s => s.PaymentMode == "Cash" || s.PaymentMode == "Credit Card");
            else if (this.CashChecked && this.DebitChecked)
                expenseData = expenseData.Where(s => s.PaymentMode == "Cash" || s.PaymentMode == "Debit Card");
            else if (this.CreditChecked && this.DebitChecked)
                expenseData = expenseData.Where(s => s.PaymentMode == "Credit Card" || s.PaymentMode == "Debit Card");
            else if (this.CashChecked)
                expenseData = expenseData.Where(s => s.PaymentMode == "Cash");
            else if (this.CreditChecked)
                expenseData = expenseData.Where(s => s.PaymentMode == "Credit Card");
            else if (this.DebitChecked)
                expenseData = expenseData.Where(s => s.PaymentMode == "Debit Card");
        }
        if (this.CategoryValue.Count() > 0)
        {
            var catagoryItems = new List<ExpenseData>();
            foreach (var category in this.CategoryValue)
            {
                catagoryItems.AddRange(expenseData.Where(s => s.Category == (string)category));
            }
            expenseData = catagoryItems;
        }
        expenseData = expenseData.OrderByDescending(e => e.DateTime).ToList();
        Task.Run(() => this.ContentRef.GridRefresh(expenseData.ToList()));
    }

    public void UpdateGrid(ExpenseDataService data)
    {
        this.ExpenseDataService = data;
        this.UpdateGrid();
    }

    public class FilterCategory
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
}