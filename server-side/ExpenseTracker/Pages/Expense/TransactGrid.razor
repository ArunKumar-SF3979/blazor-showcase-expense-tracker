@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Navigations

<div class='exp-content-container'>
    <div>
        <h1 class="page-title">All Transactions</h1>
    </div>
    <div>
        <div class="col-md-12 margin-top col-lg-12">
            <div class="expense-grid-container">
                <div class="expense-head-padding" style="background-color: @color;">
                    <div class="search-wrapper search-section" style="display: @visibility;">
                        <div id="search">
                            <EjsTextBox Type="search" ShowClearButton="true" Placeholder="Search" CssClass="search txt" @bind-Value="SearchValue" ValueChange="SearchTransact" Created="OnCreate"></EjsTextBox>
                            <span id="searchbtn" class="e-search-icon expense-search-icon e-icons" @onclick="OnSearchClicked"></span>
                        </div>
                        <div class="button-section search-section" @onclick="ShowAddTransactDialog">
                            <button id="addexpense" class="e-btn small e-info">Add Transaction</button>
                            <button id="filterExpense" class="e-btn small e-info">Filter</button>
                            <div id="add-btn" class='e-btn'>
                                <span class='e-icons add-icon add-head-item'></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="expense-grid-wrapper">
                    @if (this.TransactGridData != null) {
                        List<ItemModel> Toolbaritems = new List<ItemModel>();
                        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit", Id = "Edit" });
                        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete", Id = "Delete" });
                        <EjsGrid @ref="TransactGridRef" TValue="ExpenseData" Width="100%" Height="100%" AllowSelection="true" AllowPaging="true" AllowTextWrap="false" Toolbar="@Toolbaritems" DataSource="@TransactGridData">
                            <GridEvents RowSelected="OnGridSelectRow" RowDeselected="OnGridDeselectRow" DataBound="OnGridRender" OnToolbarClick="ToolbarClickHandler" TValue="ExpenseData"></GridEvents>
                            <GridEditSettings AllowEditing="true" AllowEditOnDblClick="false"></GridEditSettings>
                            <GridPageSettings PageSize="11"></GridPageSettings>
                            <GridColumns>
                                <GridColumn Type="ColumnType.CheckBox" Width="40"></GridColumn>
                                <GridColumn Field="Category" HeaderText="Category" Width="178" ClipMode="@ClipMode.EllipsisWithTooltip" ValidationRules="@rules">
                                    <Template>
                                        @{
                                            var expense = (context as ExpenseData);
                                            <div class="normalRes">
                                                <div class="category-icon @expense.Category"></div>
                                                <div class='category-text'>@expense.Category</div>
                                            </div>
                                            <div class="mediumRes">
                                                <div>
                                                    <div class="category-icon @expense.Category"></div>
                                                </div>
                                                <div>
                                                    <div>@expense.Category </div>
                                                    <div class="description-section"> @expense.Description </div>
                                                </div>
                                            </div>
                                            <div class="smallRes">
                                                <div class='sm-category sm-icon'>
                                                    <div class="category-icon @expense.Category"></div>
                                                </div>
                                                <div class='sm-category category-content'>
                                                    <div> @expense.Category </div>
                                                    <div class="description-section"> @expense.Description </div>
                                                    <div> @expense.PaymentMode </div>
                                                </div>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="DateTime" HeaderText="Date" Format="d" Width="112" ValidationRules="@rules"></GridColumn>
                                <GridColumn Field="PaymentMode" HeaderText="Payment Mode" Width="140" ValidationRules="@rules"></GridColumn>
                                <GridColumn Field="Description" HeaderText="Description" ClipMode="@ClipMode.Ellipsis"></GridColumn>
                                <GridColumn Field="UniqueId" HeaderText="Unique Id" IsPrimaryKey="true" Visible="false"></GridColumn>
                                <GridColumn Field="Amount" HeaderText="Amount" Width="120" Format="C0" TextAlign="@TextAlign.Right" ValidationRules="@rules">
                                    <Template>
                                        @{
                                            var expense = (context as ExpenseData);
                                            <div class="normalRes">
                                                <div class='amt-payment @expense.TransactionType'>
                                                    <span>$</span> <span>@expense.Amount</span>
                                                </div>
                                            </div>
                                            <div class="mediumRes">
                                                <div class='amt-payment @expense.TransactionType'>
                                                    <span>$</span> <span>@expense.Amount</span>
                                                </div>
                                                <div>@expense.DateTime.ToString("dd/MM/yyyy")</div>
                                            </div>
                                            <div class="smallRes">
                                                <div class='amt-payment @expense.TransactionType'>
                                                    <span>$</span> <span>@expense.Amount</span>
                                                </div>
                                                <div>@expense.DateTime.ToString("dd/MM/yyyy")</div>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </EjsGrid>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    [Inject]
    AppState AppState { get; set; }
    [CascadingParameter]
    public ExpenseDataService ExpenseDataService { get; set; }
    [Parameter]
    public Action<ExpenseDataService> OnDataChange { get; set; }

    public EjsGrid<ExpenseData> TransactGridRef;
    public TransactDialog DialogRef;

    public string SearchValue { get; set; }
    public Object rules = new { required = true };
    public IEnumerable<ExpenseData> TransactGridData { get; set; }
    private string visibility = "none";
    private string color = "#FFFFFF";

    protected override void OnInitialized()
    {
        this.UpdateTotalBalance();
    }

    /// <summary>
    /// Enable or disable the tool bar items when grid is selected
    ///
    ///</summary>
    /// <param name="args"></param>
    public async void OnGridSelectRow(RowSelectEventArgs<ExpenseData>args)
    {
        var selectedIndexes = await this.TransactGridRef.GetSelectedRecords();
        if (selectedIndexes.Count() > 1)
        {
            this.TransactGridRef.EnableToolbarItems(new string[] { "Edit", "Delete" }, false);
            this.TransactGridRef.EnableToolbarItems(new string[] { "Delete" }, true);
        }
        else if (selectedIndexes.Count() == 0)
        {
            this.TransactGridRef.EnableToolbarItems(new string[] { "Edit", "Delete" }, false);
        }
        else if (selectedIndexes.Count() == 1)
        {
            this.TransactGridRef.EnableToolbarItems(new string[] { "Edit", "Delete" }, true);
        }
    }

    /// <summary>
    /// Enable or disable the tool bar items when grid is unselected
    ///
    ///</summary>
    /// <param name="args"></param>
    public async void OnGridDeselectRow(RowDeselectEventArgs<ExpenseData>args)
    {
        var selectedIndexes = await this.TransactGridRef.GetSelectedRecords();

        if (selectedIndexes.Count() > 1)
        {
            this.TransactGridRef.EnableToolbarItems(new string[] { "Edit", "Delete" }, false);
            this.TransactGridRef.EnableToolbarItems(new string[] { "Delete" }, true);
        }
        else if (selectedIndexes.Count() == 0)
        {
            this.TransactGridRef.EnableToolbarItems(new string[] { "Edit", "Delete" }, false);
        }
        else if (selectedIndexes.Count() == 1)
        {
            this.TransactGridRef.EnableToolbarItems(new string[] { "Edit", "Delete" }, true);
        }
    }

    /// <summary>
    /// Enable or disable the tool bar items when grid is rendered
    ///
    ///</summary>
    /// <param name="args"></param>
    public void OnGridRender(object args)
    {
        this.TransactGridRef.EnableToolbarItems(new string[] { "Edit", "Delete" }, false);
    }

    /// <summary>
    /// Show edit or alert dialog
    ///
    ///</summary>
    /// <param name="args"></param>
    public void OnGridEditBegin(ActionEventArgs<ExpenseData>args)
    {
        if (args.RequestType == Syncfusion.EJ2.Blazor.Grids.Action.BeginEdit)
            args.Cancel = true;
    }

    public async void ToolbarClickHandler(Syncfusion.EJ2.Blazor.Navigations.ClickEventArgs args)
    {
        var records = await this.TransactGridRef.GetSelectedRecords();
        var selectedRecords = CommonService.GetMethodValue<List<ExpenseData>>(records);

        if (args.Item.Id == "Edit")
        {
            if (selectedRecords.Count() == 1)
                this.DialogRef.ShowEditDialog(selectedRecords[0]);
        }
        else if (args.Item.Id == "Delete")
        {
            this.DialogRef.ShowAlertDialog(selectedRecords);
        }
    }

    /// <summary>
    /// Filter the grid data when enter the text
    /// </summary>
    /// <param name="args"></param>
    public void SearchTransact(Syncfusion.EJ2.Blazor.Inputs.ChangedEventArgs args)
    {
        this.TransactGridRef.Search(args.Value);
    }

    /// <summary>
    /// Filter the grid data when search button is clicked
    /// </summary>
    public void OnSearchClicked()
    {
        this.TransactGridRef.Search(this.SearchValue);
    }

    /// <summary>
    /// Add record to source and refresh
    /// </summary>
    /// <param name="gridData"></param>
    public void AddRecord(ExpenseData gridData)
    {
        ExpenseDataService.ExpenseData.Add(gridData);
        OnDataChange?.Invoke(ExpenseDataService);
    }

    /// <summary>
    /// Update record in source and refresh
    /// </summary>
    /// <param name="gridData"></param>
    public void UpdateRecord(ExpenseData gridData)
    {
        foreach (var data in ExpenseDataService.ExpenseData.Where(s => s.UniqueId == gridData.UniqueId))
        {
            data.UniqueId = gridData.UniqueId;
            data.TransactionType = gridData.TransactionType;
            data.DateTime = gridData.DateTime;
            data.Category = gridData.Category;
            data.PaymentMode = gridData.PaymentMode;
            data.Description = gridData.Description;
            data.Amount = gridData.Amount;
            data.MonthShort = gridData.MonthShort;
            data.MonthFull = gridData.MonthFull;
            data.FormattedDate = gridData.FormattedDate;
        }
        OnDataChange?.Invoke(ExpenseDataService);
    }

    /// <summary>
    /// Removed the record from source and refresh
    /// </summary>
    /// <param name="uniqueIds"></param>
    public void RemoveRecord(List<string> uniqueIds)
    {
        foreach (var id in uniqueIds)
        {
            var index = ExpenseDataService.ExpenseData.FindIndex(s => s.UniqueId == id);
            ExpenseDataService.ExpenseData.RemoveAt(index);
        }
        OnDataChange?.Invoke(ExpenseDataService);
    }

    private void OnCreate()
    {
        this.visibility = ""; this.color = "";
    }

    public void GridRefresh(List<ExpenseData> gridData)
    {
        this.TransactGridData = gridData;
        this.StateHasChanged();
    }

    public void ShowAddTransactDialog()
    {
        this.DialogRef.ShowAddDialog();
    }

    /// <summary>
    /// Update the totalBalance when grid data is updated
    /// </summary>
    public void UpdateTotalBalance()
    {
        int incomeRS = 0;
        int expenseRS = 0;
        List<ExpenseData> incomeD = new List<ExpenseData>();
        List<ExpenseData> expenseD = new List<ExpenseData>();
        DateTime start = ExpenseDataService.StartDate; DateTime end = ExpenseDataService.EndDate;
        var commonData = ExpenseDataService.ExpenseData.Where(s => s.DateTime >= start && s.DateTime <= end);
        incomeD = commonData.Where(s => s.TransactionType == "Income").ToList();
        incomeRS = incomeD.Sum(s => Convert.ToInt32(s.Amount));
        expenseD = commonData.Where(s => s.TransactionType == "Expense").ToList();
        expenseRS = expenseD.Sum(s => s.Amount);
        var totalBalance = CommonService.GetCurrencyVal(incomeRS - expenseRS);
        this.AppState.UpdateCurrentBalance(totalBalance);
    }
}
